var loader;(function(loader){const ResCache=new Map();const ZipCache=new Map();class ZipLoader{constructor(){this.init()}static get Instance(){if(this._instance==null){this._instance=new ZipLoader()}return this._instance}init(){const accessor=Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype,'response');Object.defineProperty(XMLHttpRequest.prototype,'response',{get:function(){if(this.zipCacheUrl){const res=ResCache.get(this.zipCacheUrl);return this.responseType==="json"?JSON.parse(res):res}return accessor&&accessor.get?.call(this)},set:function(str){},configurable:true});const oldOpen=XMLHttpRequest.prototype.open;XMLHttpRequest.prototype.open=function(method,url,async=true,user=null,password=null){if(ZipCache.has(url)){this.zipCacheUrl=url}return oldOpen.call(this,method,url,async,user,password)};const oldSend=XMLHttpRequest.prototype.send;XMLHttpRequest.prototype.send=async function(data){if(this.zipCacheUrl){if(!ResCache.has(this.zipCacheUrl)){const cache=ZipCache.get(this.zipCacheUrl);if(this.responseType==="json"){const text=await cache.async("text");ResCache.set(this.zipCacheUrl,text)}else{const res=await cache.async(this.responseType);ResCache.set(this.zipCacheUrl,res)}}this.onload();return}return oldSend.call(this,data)}}downloadBundle(bundleName,onProgress,onComplete){const options={xhrResponseType:'arraybuffer',};const JSZIP=window['JSZIP'];this.downloadFile('assets/'+bundleName+'.zip',options,onProgress,(err,data)=>{if(err){onComplete(err);return}let zip=new JSZIP();zip.loadAsync(data).then((zipDatas)=>{zipDatas.forEach((v,t)=>{if(t.dir)return;ZipCache.set('assets/'+v,t)});onComplete(null,zipDatas);zipDatas=null;data=null;zip=null}).catch((e)=>{onComplete(e)})})}downloadFile(url,options,onProgress,onComplete){const xhr=new XMLHttpRequest();const errInfo=`download failed:${url},status:`;xhr.open('GET',url,true);if(options.xhrResponseType!==undefined){xhr.responseType=options.xhrResponseType}if(options.xhrWithCredentials!==undefined){xhr.withCredentials=options.xhrWithCredentials}if(options.xhrMimeType!==undefined&&xhr.overrideMimeType){xhr.overrideMimeType(options.xhrMimeType)}if(options.xhrTimeout!==undefined){xhr.timeout=options.xhrTimeout}if(options.xhrHeader){for(const header in options.xhrHeader){xhr.setRequestHeader(header,options.xhrHeader[header])}}xhr.onload=()=>{if(xhr.status===200||xhr.status===0){if(onComplete){onComplete(null,xhr.response)}}else if(onComplete){onComplete(new Error(`${errInfo}${xhr.status}(no response)`))}};if(onProgress){xhr.onprogress=(e)=>{if(e.lengthComputable){onProgress(e.loaded,e.total)}}}xhr.onerror=()=>{if(onComplete){onComplete(new Error(`${errInfo}${xhr.status}(error)`))}};xhr.ontimeout=()=>{if(onComplete){onComplete(new Error(`${errInfo}${xhr.status}(time out)`))}};xhr.onabort=()=>{if(onComplete){onComplete(new Error(`${errInfo}${xhr.status}(abort)`))}};xhr.send(null);return xhr}downloadSrc(src,onProgress,onComplete){const options={xhrResponseType:'arraybuffer',};if(!src.endsWith('.zip')){src=src+'.zip'}this.downloadFile(src,options,onProgress,(err,data)=>{if(err){onComplete(err);return}const JSZIP=window['JSZIP'];let zip=new JSZIP();let jsFiles={};let polyfills=null;let systemjs=null;zip.loadAsync(data).then((zipDatas)=>{zipDatas.forEach((v,t)=>{if(t.dir)return;if(v.endsWith('.js')){console.log('script:',v);if(v.indexOf('polyfills')!==-1){polyfills=t}else if(v.indexOf('system')!==-1){systemjs=t}else{jsFiles[v]=t}}ZipCache.set(v,t)});let ps=[];if(polyfills){let p=this.loadScriptWithT(polyfills);ps.push(p)}if(systemjs){let p=this.loadScriptWithT(systemjs);ps.push(p)}for(let key in jsFiles){let p=this.loadScriptWithT(jsFiles[key]);ps.push(p)}Promise.all(ps).then(()=>{onComplete(null,zipDatas);zipDatas=null;data=null;zip=null;polyfills=null;systemjs=null;jsFiles=null}).catch((e)=>{onComplete(e)})}).catch((e)=>{onComplete(e)})})}async loadScriptWithT(t){const data=await t.async('text');const script=document.createElement('script');script.type='text/javascript';script.async=false;script.src=window.URL.createObjectURL(new Blob([data],{type:'application/javascript'}));document.body.appendChild(script);return true}async loadScriptWithPath(path){console.log('loadScriptWithPath:',path);const t=ZipCache.get(path);if(!t){console.error('not found:',path);return false}return await this.loadScriptWithT(t)}async getScriptBlob(path){const t=ZipCache.get(path);if(!t){console.error('not found:',path);return null}const data=await t.async('text');return new Blob([data],{type:'application/javascript'})}async getImageBlob(path){const t=ZipCache.get(path);if(!t){console.error('not found:',path);return null}return await t.async('blob')}}ZipLoader._instance=null;loader.ZipLoader=ZipLoader})(loader||(loader={}));